{
    "version": 1,
    "environment": {
        "info": {
            "id": "E-1",
            "level": -1,
            "name": "",
            "description": ""
        },
        "sources": [
            {
                "info": {
                    "id": "Src-1.0",
                    "level": -1,
                    "name": "Users",
                    "description": "Network participants who interact with Solana through high-speed transactions, DeFi protocols, NFTs, and dApp usage. Distinguished by observable patterns:\n\n1. Measurable Characteristics:\n- Transaction volume and frequency (50k+ TPS capacity)\n- SOL holdings and staking delegation patterns\n- Program interaction complexity and cross-program invocations\n- DeFi protocol participation (DEXs, lending, yield farming)\n- NFT trading and creation activity\n\n2. Participant Types (by activity pattern):\n- DeFi Power Users: High-frequency trading and yield optimization\n- NFT Ecosystem: Creators, collectors, and marketplace participants\n- dApp Developers: Building and deploying Solana programs\n- SOL Stakers: Delegating to validators for network security\n- MEV Searchers: Arbitrage and liquidation opportunities\n\n3. Network Role:\nProvides economic activity through transaction fees, SOL staking, and participation in Solana's high-performance decentralized economy\n\n\nUser Types (distinguished by observable patterns):\n\n1. High-Frequency Traders\n- Pattern: Rapid transaction sequences leveraging low fees\n- Measurable: Transaction burst patterns, MEV capture, arbitrage frequency\n- Value range: Variable from micro-transactions to large positions\n\n2. DeFi Liquidity Providers\n- Pattern: Multi-protocol liquidity provision and yield farming\n- Measurable: LP token holdings, protocol interactions, yield optimization\n- Value range: Substantial positions across multiple protocols\n\n3. Program Developers\n- Pattern: Smart contract deployment and cross-program integration\n- Measurable: Program deployment frequency, CPI usage, runtime optimization\n- Value range: Development costs plus operational SOL\n\n4. Validator Delegators\n- Pattern: SOL staking for network security rewards\n- Measurable: Delegation amounts, validator selection patterns, reward claiming\n- Value range: From small delegation to institutional staking"
                },
                "type": "Source",
                "transform": {
                    "translation": [
                        -637.8666,
                        -15.706864
                    ],
                    "rotation": -3.1119733
                },
                "equivalence": "",
                "model": "",
                "is_same_as_id": null
            },
            {
                "info": {
                    "id": "Src-1.1",
                    "level": -1,
                    "name": "Github",
                    "description": "Open source development platform hosting Solana Labs repositories, Anchor framework, Solana Program Library (SPL), and ecosystem projects. Primary coordination point for Rust-based blockchain development."
                },
                "type": "Source",
                "transform": {
                    "translation": [
                        -1.4923304,
                        562.698
                    ],
                    "rotation": 1.5683142
                },
                "equivalence": "",
                "model": "",
                "is_same_as_id": null
            },
            {
                "info": {
                    "id": "Src-1.2",
                    "level": -1,
                    "name": "Internet Infrastructure",
                    "description": "High-bandwidth internet connectivity and cloud infrastructure required for Solana validator operations, RPC node services, and high-throughput transaction processing."
                },
                "type": "Source",
                "transform": {
                    "translation": [
                        -408.72498,
                        -386.6667
                    ],
                    "rotation": -3.052133
                },
                "equivalence": "",
                "model": "",
                "is_same_as_id": null
            }
        ],
        "sinks": [
            {
                "info": {
                    "id": "Snk-1.0",
                    "level": -1,
                    "name": "Environment",
                    "description": "Digital infrastructure that absorbs computational load and network traffic generated by Solana validators, RPC nodes, and high-frequency transaction processing."
                },
                "type": "Sink",
                "transform": {
                    "translation": [
                        583.368,
                        -378.1627
                    ],
                    "rotation": -0.22724228
                },
                "equivalence": "",
                "model": "",
                "is_same_as_id": null
            },
            {
                "info": {
                    "id": "Snk-1.1",
                    "level": -1,
                    "name": "Users",
                    "description": "Network participants who receive transaction confirmations, program execution results, and staking rewards from Solana's high-performance blockchain. Distinguished by observable patterns:\n\n1. Measurable Characteristics:\n- Sub-second transaction confirmation times\n- Parallel program execution results via Sealevel runtime\n- SOL staking rewards and delegation returns\n- Cross-program invocation (CPI) execution outputs\n- Real-time trading and DeFi position updates\n\n2. Participant Types (by receipt pattern):\n- High-Frequency Traders: Receive rapid trade confirmations and MEV opportunities\n- DeFi Users: Receive yield, liquidations, and automated strategy executions\n- NFT Participants: Receive minting confirmations and marketplace transactions\n- Stakers: Receive regular SOL rewards from validator delegation\n\n3. Network Role:\nConsumes Solana's high-performance computational output through confirmed transactions, executed programs, and updated blockchain state\n\n\nUser Receipt Types (distinguished by observable patterns):\n\n1. Transaction Confirmations\n- Pattern: Sub-second finality for simple SOL transfers and token operations\n- Measurable: Confirmation speed, slot finality, transaction success rates\n- Output: Updated balances and transaction receipts\n\n2. Program Execution Results\n- Pattern: Parallel smart contract execution via Sealevel runtime\n- Measurable: Compute units used, cross-program invocations, state changes\n- Output: Program execution logs and state updates\n\n3. DeFi Position Updates\n- Pattern: Real-time trading, yield generation, and automated strategies\n- Measurable: Price impact, slippage, yield rates, liquidation events\n- Output: Updated DeFi positions and portfolio values\n\n4. Staking Rewards\n- Pattern: Regular SOL reward distribution from validator delegation\n- Measurable: APY rates, validator performance, reward frequency\n- Output: Increased SOL balances and staking returns"
                },
                "type": "Sink",
                "transform": {
                    "translation": [
                        726.2668,
                        2.767423
                    ],
                    "rotation": 0.009286132
                },
                "equivalence": "",
                "model": "",
                "is_same_as_id": null
            }
        ]
    },
    "systems": [
        {
            "info": {
                "id": "C0.2",
                "level": 1,
                "name": "Development",
                "description": "The Rust-focused development ecosystem maintaining Solana's core infrastructure and runtime optimizations. Key contributors include Solana Labs, Anchor framework developers, SPL protocol teams, and the broader Rust blockchain community.\n\nKey functions:\n1. Solana core client development and runtime optimizations\n2. Anchor framework for simplified program development\n3. Solana Program Library (SPL) token standards and protocols\n4. Sealevel runtime improvements and parallel execution optimization\n5. Developer tooling and SDK maintenance across multiple languages\n\nDevelopment emphasizes performance optimization, developer experience, and ecosystem growth through hackathons, grants, and technical education.\n\nhttps://github.com/solana-labs/solana\nhttps://github.com/coral-xyz/anchor\nhttps://github.com/solana-labs/solana-program-library\nhttps://solana.com/developers"
            },
            "sources": [],
            "sinks": [],
            "parent": "S0",
            "complexity": {
                "Complex": {
                    "adaptable": false,
                    "evolveable": false
                }
            },
            "boundary": {
                "info": {
                    "id": "B0.2",
                    "level": 1,
                    "name": "",
                    "description": ""
                },
                "porosity": 0.0,
                "perceptive_fuzziness": 0.0,
                "interfaces": [
                    {
                        "info": {
                            "id": "I0.2.0",
                            "level": 2,
                            "name": "Protocol Enhancement Release",
                            "description": "Issues new Solana client versions, runtime optimizations, and feature activations that improve network performance and capabilities.\n\nKey functions:\n1. Core client software releases and performance improvements\n2. Feature gate activation for new capabilities\n3. Sealevel runtime optimizations and parallel execution enhancements\n4. Developer tool updates and SDK improvements\n5. Network upgrade coordination and compatibility testing\n\nSource repositories:\nhttps://github.com/solana-labs/solana/releases\nhttps://docs.solana.com/developing/programming-model/overview\nhttps://docs.solana.com/developing/clients"
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "C0.5"
                        ],
                        "receives_from": [],
                        "angle": -0.029942956
                    }
                ],
                "parent_interface": "I0.2"
            },
            "radius": 56.25,
            "transform": {
                "translation": [
                    -56.250004,
                    0.0
                ],
                "rotation": -3.1415925
            },
            "equivalence": "",
            "history": "",
            "transformation": "",
            "member_autonomy": 1.0,
            "time_constant": "Second"
        },
        {
            "info": {
                "id": "C0.1",
                "level": 1,
                "name": "Executing",
                "description": "Distributed network of Solana nodes that process transactions through the Sealevel parallel runtime and execute Solana programs (smart contracts). These nodes handle high-throughput transaction processing and program execution.\n\n\nKey functions:\n1. Transaction validation and parallel execution via Sealevel runtime\n2. Solana program (smart contract) execution and Cross Program Invocation (CPI)\n3. Account state management and rent collection\n4. Transaction fee processing and prioritization\n5. Proof of History (PoH) sequence verification\n6. Real-time transaction streaming and confirmation\n\nExecution nodes work with validators to maintain Solana's high-performance transaction processing, enabling 50k+ TPS with sub-second confirmation times through parallel execution.\n\n\n\nSource repositories:\nhttps://github.com/solana-labs/solana/tree/master/runtime\nhttps://github.com/solana-labs/solana/tree/master/program-runtime\nhttps://github.com/solana-labs/solana/tree/master/core\n\nDocumentation:\nhttps://docs.solana.com/developing/programming-model/runtime\nhttps://docs.solana.com/developing/programming-model/calling-between-programs"
            },
            "sources": [],
            "sinks": [],
            "parent": "S0",
            "complexity": {
                "Complex": {
                    "adaptable": false,
                    "evolveable": false
                }
            },
            "boundary": {
                "info": {
                    "id": "B0.1",
                    "level": 1,
                    "name": "",
                    "description": ""
                },
                "porosity": 0.0,
                "perceptive_fuzziness": 0.0,
                "interfaces": [
                    {
                        "info": {
                            "id": "I0.1.0",
                            "level": 2,
                            "name": "Block & State Reception",
                            "description": "Receives and processes new blocks with executed transactions and program state updates from the consensus layer.\n\nKey functions:\n1. Block payload reception with PoH sequence verification\n2. Parallel transaction execution via Sealevel runtime\n3. Account state synchronization and updates\n4. Program execution result validation\n5. Cross Program Invocation (CPI) processing\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/runtime\nhttps://github.com/solana-labs/solana/tree/master/core/src"
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "C0.5"
                        ],
                        "angle": 0.88838017
                    },
                    {
                        "info": {
                            "id": "I0.1.1",
                            "level": 2,
                            "name": "Transaction Propagation",
                            "description": "Broadcasts validated transactions and program invocations to the network for inclusion in blocks.\n\nKey functions:\n1. Transaction signature verification and validation\n2. Priority fee assessment and transaction ordering\n3. Account access pattern analysis for parallel execution\n4. Program instruction preparation and CPI validation\n5. Real-time transaction streaming to validators\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/banking_stage.rs\nhttps://github.com/solana-labs/solana/tree/master/gossip"
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "C0.4"
                        ],
                        "receives_from": [],
                        "angle": -0.45951575
                    }
                ],
                "parent_interface": "I0.1"
            },
            "radius": 61.875004,
            "transform": {
                "translation": [
                    -61.875004,
                    0.0
                ],
                "rotation": -3.1415925
            },
            "equivalence": "",
            "history": "",
            "transformation": "",
            "member_autonomy": 1.0,
            "time_constant": "Second"
        },
        {
            "info": {
                "id": "S0",
                "level": 0,
                "name": "Solana",
                "description": "A high-performance proof-of-stake blockchain designed for decentralized applications and crypto-currencies, utilizing Proof of History (PoH) for verifiable time ordering and Tower BFT for consensus.\n\n\n Key observables: Transaction throughput (50k+ TPS), validator count (1000+), SOL staked percentage, program execution speed, network latency.\"\n\n\n\n\n"
            },
            "sources": [],
            "sinks": [],
            "parent": "E-1",
            "complexity": {
                "Complex": {
                    "adaptable": true,
                    "evolveable": true
                }
            },
            "boundary": {
                "info": {
                    "id": "B0",
                    "level": 0,
                    "name": "Solana Network Boundary",
                    "description": "Defined by the interfaces between Solana's high-performance execution environment and external entities.\n\nKey interfaces include: SOL transaction submission, program deployment and invocation, validator staking operations, and RPC API access for dApp integration.\n\n\nPorosity: 0 (The boundary is cryptographically defined by PoH timestamps and Tower BFT consensus)\nPerceptive Fuzziness: 0 (The rules for valid transactions and program execution are deterministically enforced)"
                },
                "porosity": 0.0,
                "perceptive_fuzziness": 0.0,
                "interfaces": [
                    {
                        "info": {
                            "id": "I0.0",
                            "level": 1,
                            "name": "Network Load Distribution",
                            "description": "Distributed computational load and bandwidth consumption across validator infrastructure and RPC node operations for high-throughput processing."
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "Snk-1.0"
                        ],
                        "receives_from": [],
                        "angle": -0.7994034
                    },
                    {
                        "info": {
                            "id": "I0.1",
                            "level": 1,
                            "name": "Cryptographic Wallet",
                            "description": "Application interface that allows Solana users to create and sign transactions, deploy and interact with programs, and manage SOL and SPL tokens.\n\nActs as the primary boundary between users and the execution subsystem, implementing Solana transaction formats and program invocation standards.\n\nKey functions:\n1. Transaction creation and signing with recent blockhash\n2. Program deployment and Cross Program Invocation (CPI)\n3. SOL and SPL token management\n4. Validator delegation and staking operations\n5. Real-time RPC communication for high-speed interactions\n\nImplementations:\nPhantom, Solflare, Ledger Live\nhttps://docs.solana.com/developing/clients/javascript-api\nhttps://docs.solana.com/wallet-guide"
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "Src-1.0"
                        ],
                        "angle": -3.1196945
                    },
                    {
                        "info": {
                            "id": "I0.2",
                            "level": 1,
                            "name": "Developer Portal",
                            "description": "Web-based interfaces providing documentation, tutorials, and development tools for Solana program developers and ecosystem builders."
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "Src-1.1"
                        ],
                        "angle": 1.575743
                    },
                    {
                        "info": {
                            "id": "I0.3",
                            "level": 1,
                            "name": "Network Connectivity",
                            "description": "High-bandwidth internet infrastructure and cloud services enabling Solana's high-throughput transaction processing and validator operations."
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "Src-1.2"
                        ],
                        "angle": -2.0107536
                    },
                    {
                        "info": {
                            "id": "I0.4",
                            "level": 1,
                            "name": "RPC Interface",
                            "description": "Broadcasts finalized SOL transactions, program execution results, and real-time blockchain state to users and applications through high-performance JSON-RPC endpoints."
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "Snk-1.1"
                        ],
                        "receives_from": [],
                        "angle": -0.000039628354
                    }
                ],
                "parent_interface": null
            },
            "radius": 300.0,
            "transform": {
                "translation": [
                    0.0,
                    0.0
                ],
                "rotation": 0.0
            },
            "equivalence": "",
            "history": "",
            "transformation": "",
            "member_autonomy": 1.0,
            "time_constant": "Second"
        },
        {
            "info": {
                "id": "C0.5",
                "level": 1,
                "name": "Protocol",
                "description": "The Protocol subsystem enforces Solana's consensus rules through Tower BFT and coordinates Proof of History (PoH) sequence verification across the network. It manages network upgrades and feature activations.\n\nKey functions:\n1. Tower BFT consensus rule implementation and vote processing\n2. Proof of History (PoH) sequence generation and verification\n3. Feature gate management and network upgrade coordination\n4. Slot and epoch progression with timing validation\n5. Network performance monitoring and optimization\n\nThis subsystem processes validator votes, manages PoH clock synchronization, and ensures all validators follow identical rules for block production and finality. It integrates protocol upgrades while maintaining network performance.\n\nhttps://docs.solana.com/cluster/consensus\nhttps://docs.solana.com/cluster/synchronization\nhttps://github.com/solana-labs/solana/tree/master/core/src/consensus"
            },
            "sources": [],
            "sinks": [],
            "parent": "S0",
            "complexity": {
                "Complex": {
                    "adaptable": false,
                    "evolveable": false
                }
            },
            "boundary": {
                "info": {
                    "id": "B0.5",
                    "level": 1,
                    "name": "",
                    "description": ""
                },
                "porosity": 0.0,
                "perceptive_fuzziness": 0.0,
                "interfaces": [
                    {
                        "info": {
                            "id": "I0.5.0",
                            "level": 2,
                            "name": "Protocol Version Management",
                            "description": "Receives and processes protocol upgrades and feature activations from the Development subsystem. Manages network-wide feature rollouts.\n\nKey functions:\n1. Feature gate activation and rollout coordination\n2. Client version compatibility checking\n3. Network upgrade orchestration\n4. Performance optimization deployment\n5. Runtime feature management\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/sdk/feature-set\nhttps://github.com/solana-labs/solana/tree/master/core/src"
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "C0.2"
                        ],
                        "angle": 1.5668627
                    },
                    {
                        "info": {
                            "id": "I0.5.1",
                            "level": 2,
                            "name": "Consensus Rules & Rewards",
                            "description": "Defines and enforces the consensus rules for block production, validator voting, and SOL staking rewards through Tower BFT.\n\nKey functions:\n1. Validator reward calculation and distribution\n2. Tower BFT voting rules and timeout management\n3. Stake delegation and validator selection\n4. Slashing condition enforcement\n5. Proof of History timing validation\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/consensus\nhttps://github.com/solana-labs/solana/tree/master/stake-program"
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "C0.4"
                        ],
                        "receives_from": [],
                        "angle": 0.764552
                    },
                    {
                        "info": {
                            "id": "I0.5.2",
                            "level": 2,
                            "name": "Block & State Distribution",
                            "description": "Manages the distribution of finalized blocks and network state across the validator network with PoH sequence verification.\n\nKey functions:\n1. Block gossip propagation with PoH timestamps\n2. State synchronization across validators\n3. Vote aggregation and consensus formation\n4. Network partition recovery\n5. Real-time performance monitoring\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/gossip\nhttps://github.com/solana-labs/solana/tree/master/core/src/cluster_info.rs"
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "C0.1"
                        ],
                        "receives_from": [],
                        "angle": 2.6680434
                    },
                    {
                        "info": {
                            "id": "I0.5.3",
                            "level": 2,
                            "name": "Block Validation/Finalization",
                            "description": "Validates proposed blocks and manages their finalization through Tower BFT consensus with PoH verification.\n\nKey functions:\n1. Block proposal validation with PoH sequence checking\n2. Transaction execution result verification\n3. Vote processing and consensus determination\n4. Fork choice rule implementation\n5. Network timing synchronization\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/consensus\nhttps://github.com/solana-labs/solana/tree/master/core/src/replay_stage.rs"
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "C0.4"
                        ],
                        "angle": -0.18468088
                    }
                ],
                "parent_interface": null
            },
            "radius": 67.5,
            "transform": {
                "translation": [
                    -2.044513,
                    33.663166
                ],
                "rotation": 0.0
            },
            "equivalence": "",
            "history": "",
            "transformation": "",
            "member_autonomy": 1.0,
            "time_constant": "Second"
        },
        {
            "info": {
                "id": "C0.4",
                "level": 1,
                "name": "Validating",
                "description": "Network participants who secure Solana through proof-of-stake validation and Tower BFT consensus. Validators process transactions, produce blocks with Proof of History timestamps, and participate in vote-based consensus.\n\nValidators run Solana client software that produces PoH sequences, executes transactions through Sealevel runtime, and participates in Tower BFT voting. They earn rewards from transaction fees and protocol inflation.\n\nKey functions:\n\n1. Proof of History (PoH) sequence generation\n2. Block production with parallel transaction execution\n3. Tower BFT voting and consensus participation\n4. Transaction validation and fee collection\n5. Network monitoring and performance optimization\n\nValidator participation maintains Solana's high-performance consensus with 400ms block times and enables the network's 50k+ TPS capacity through optimized hardware and software.\n\nhttps://docs.solana.com/running-validator/\nhttps://docs.solana.com/cluster/consensus\nhttps://www.validators.app/"
            },
            "sources": [],
            "sinks": [],
            "parent": "S0",
            "complexity": {
                "Complex": {
                    "adaptable": false,
                    "evolveable": false
                }
            },
            "boundary": {
                "info": {
                    "id": "B0.4",
                    "level": 1,
                    "name": "",
                    "description": ""
                },
                "porosity": 0.0,
                "perceptive_fuzziness": 0.0,
                "interfaces": [
                    {
                        "info": {
                            "id": "I0.4.0",
                            "level": 2,
                            "name": "Consensus Rule Reception",
                            "description": "Receives and implements consensus rules, validator duties, and reward parameters from the Protocol subsystem.\n\nKey functions:\n1. Tower BFT voting rules and timeout parameters\n2. PoH sequence generation requirements\n3. Validator reward rate calculations\n4. Stake delegation and selection criteria\n5. Network performance targets and monitoring\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/consensus\nhttps://github.com/solana-labs/solana/tree/master/validator"
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "C0.5"
                        ],
                        "angle": 2.0922894
                    },
                    {
                        "info": {
                            "id": "I0.4.1",
                            "level": 2,
                            "name": "Transaction Pool Access",
                            "description": "Accesses pending transactions from the banking stage for inclusion in produced blocks.\n\nKey functions:\n1. Transaction selection by priority fee\n2. Parallel execution planning via account access analysis\n3. Block packing optimization for maximum throughput\n4. Cross Program Invocation (CPI) dependency resolution\n5. Real-time transaction processing and confirmation\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/banking_stage.rs\nhttps://github.com/solana-labs/solana/tree/master/runtime"
                        },
                        "protocol": "",
                        "type": "Import",
                        "exports_to": [],
                        "receives_from": [
                            "C0.1"
                        ],
                        "angle": -2.7008166
                    },
                    {
                        "info": {
                            "id": "I0.4.2",
                            "level": 2,
                            "name": "Block Proposal",
                            "description": "Proposes new blocks with PoH timestamps and executed transactions when selected as leader.\n\nKey functions:\n1. PoH sequence generation and timestamping\n2. Block construction with parallel transaction execution\n3. Tower BFT vote casting and aggregation\n4. Leader schedule coordination\n5. Network performance optimization\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/leader_schedule.rs\nhttps://github.com/solana-labs/solana/tree/master/poh"
                        },
                        "protocol": "",
                        "type": "Export",
                        "exports_to": [
                            "C0.5"
                        ],
                        "receives_from": [],
                        "angle": 2.9994483
                    }
                ],
                "parent_interface": "I0.4"
            },
            "radius": 67.5,
            "transform": {
                "translation": [
                    -67.5,
                    0.0
                ],
                "rotation": 0.0
            },
            "equivalence": "",
            "history": "",
            "transformation": "",
            "member_autonomy": 1.0,
            "time_constant": "Second"
        }
    ],
    "interactions": [
        {
            "info": {
                "id": "F-1.0",
                "level": -1,
                "name": "Computational Load",
                "description": "https://solanabeach.io/\n\nhttps://www.validators.app/\n\nhttps://solscan.io/"
            },
            "substance": {
                "sub_type": "",
                "type": "Energy"
            },
            "type": "Flow",
            "usability": "Waste",
            "source": "S0",
            "source_interface": "I0.0",
            "sink": "Snk-1.0",
            "sink_interface": null,
            "amount": "1",
            "unit": "",
            "parameters": [
                {
                    "name": "Validator computational load",
                    "value": "CPU/GPU utilization",
                    "unit": ""
                },
                {
                    "name": "Network bandwidth usage",
                    "value": "GB/day",
                    "unit": ""
                },
                {
                    "name": "RPC infrastructure cost",
                    "value": "USD/month",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F-1.1",
                "level": -1,
                "name": "Transaction Requests",
                "description": "High-frequency SOL transactions, program invocations, and Cross Program Invocation (CPI) calls submitted by users to the Solana network. Each transaction includes priority fees for rapid processing and may involve complex program interactions. Transactions enter the banking stage where they compete for inclusion based on fee priority and parallel execution optimization."
            },
            "substance": {
                "sub_type": "Pending transaction",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Product",
            "source": "Src-1.0",
            "source_interface": null,
            "sink": "S0",
            "sink_interface": "I0.1",
            "amount": "1",
            "unit": "Transaction",
            "parameters": [
                {
                    "name": "Transaction priority fee",
                    "value": "lamports",
                    "unit": ""
                },
                {
                    "name": "Program invocation complexity",
                    "value": "compute units",
                    "unit": ""
                },
                {
                    "name": "Cross Program Invocation depth",
                    "value": "CPI calls",
                    "unit": ""
                },
                {
                    "name": "Parallel execution potential",
                    "value": "account conflicts",
                    "unit": ""
                },
                {
                    "name": "MEV opportunity value",
                    "value": "SOL",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F-1.2",
                "level": -1,
                "name": "Contributors",
                "description": "Solana ecosystem contributors include Rust developers, Anchor framework contributors, SPL protocol developers, and performance optimization specialists. Contributions flow through GitHub repositories, community forums, and hackathons with emphasis on performance and developer experience.\n\n\n"
            },
            "substance": {
                "sub_type": "Code contribution",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Resource",
            "source": "Src-1.1",
            "source_interface": null,
            "sink": "S0",
            "sink_interface": "I0.2",
            "amount": "1",
            "unit": "",
            "parameters": [
                {
                    "name": "Runtime optimization contributions",
                    "value": "PRs/month",
                    "unit": ""
                },
                {
                    "name": "Anchor framework updates",
                    "value": "releases/quarter",
                    "unit": ""
                },
                {
                    "name": "SPL token standard development",
                    "value": "new standards/year",
                    "unit": ""
                },
                {
                    "name": "Performance benchmarking",
                    "value": "TPS improvements",
                    "unit": ""
                },
                {
                    "name": "Developer tool contributions",
                    "value": "tools/month",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F-1.3",
                "level": -1,
                "name": "Network Bandwidth",
                "description": "High-bandwidth internet connectivity required for Solana validator operations, RPC node services, and high-throughput transaction processing. Validators require substantial bandwidth for gossip protocol, transaction processing, and PoH sequence distribution.\n"
            },
            "substance": {
                "sub_type": "Bandwidth",
                "type": "Energy"
            },
            "type": "Flow",
            "usability": "Resource",
            "source": "Src-1.2",
            "source_interface": null,
            "sink": "S0",
            "sink_interface": "I0.3",
            "amount": "1",
            "unit": "Mbps",
            "parameters": [
                {
                    "name": "Validator bandwidth usage",
                    "value": "GB/hour",
                    "unit": ""
                },
                {
                    "name": "RPC node traffic",
                    "value": "requests/second",
                    "unit": ""
                },
                {
                    "name": "Gossip protocol overhead",
                    "value": "MB/minute",
                    "unit": ""
                },
                {
                    "name": "PoH sequence distribution",
                    "value": "timestamps/second",
                    "unit": ""
                },
                {
                    "name": "Transaction streaming",
                    "value": "TPS throughput",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F-1.4",
                "level": -1,
                "name": "Confirmed Transactions",
                "description": "Finalized SOL transactions, executed program invocations, and distributed staking rewards recorded in blocks with Proof of History timestamps.\n\nTransaction types: SOL transfers, SPL token operations, program deployments, CPI calls, validator voting, staking operations"
            },
            "substance": {
                "sub_type": "Blockchain Data",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Product",
            "source": "S0",
            "source_interface": "I0.4",
            "sink": "Snk-1.1",
            "sink_interface": null,
            "amount": "1",
            "unit": "Block",
            "parameters": [
                {
                    "name": "Block production time",
                    "value": "milliseconds",
                    "unit": ""
                },
                {
                    "name": "Transactions per block",
                    "value": "count",
                    "unit": ""
                },
                {
                    "name": "Compute units consumed",
                    "value": "CU",
                    "unit": ""
                },
                {
                    "name": "PoH sequence length",
                    "value": "ticks",
                    "unit": ""
                },
                {
                    "name": "Transaction success rate",
                    "value": "percentage",
                    "unit": ""
                },
                {
                    "name": "Network throughput",
                    "value": "TPS",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F0.0",
                "level": 1,
                "name": "Consensus Rules & Parameters",
                "description": "Consensus rules and validator duty assignments transmitted from Protocol to Validating subsystem. Defines PoH generation, Tower BFT voting, and reward distribution.\n\nKey parameters:\n1. Validator set and stake distribution\n2. Tower BFT voting timeouts and rules\n3. PoH sequence generation requirements\n4. Staking reward rates and distribution\n5. Leader schedule and slot assignments\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/consensus\nhttps://github.com/solana-labs/solana/tree/master/stake-program"
            },
            "substance": {
                "sub_type": "Consensus Rules",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Product",
            "source": "C0.5",
            "source_interface": "I0.5.1",
            "sink": "C0.4",
            "sink_interface": "I0.4.0",
            "amount": "1",
            "unit": "parameters",
            "parameters": [
                {
                    "name": "Active validators",
                    "value": "count",
                    "unit": ""
                },
                {
                    "name": "Total staked SOL",
                    "value": "SOL",
                    "unit": ""
                },
                {
                    "name": "Current staking APY",
                    "value": "percentage",
                    "unit": ""
                },
                {
                    "name": "Leader schedule length",
                    "value": "slots",
                    "unit": ""
                },
                {
                    "name": "Vote timeout",
                    "value": "milliseconds",
                    "unit": ""
                },
                {
                    "name": "PoH tick rate",
                    "value": "ticks/second",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F0.1",
                "level": 1,
                "name": "Transaction Stream",
                "description": "High-throughput validated transaction stream passed from Executing to Validating subsystem for block inclusion and PoH timestamping.\n\nKey parameters:\n1. Transaction volume and priority distribution\n2. Program execution complexity and CPI chains\n3. Parallel execution optimization data\n4. Fee market dynamics and MEV opportunities\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/banking_stage.rs\nhttps://github.com/solana-labs/solana/tree/master/runtime"
            },
            "substance": {
                "sub_type": "",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Product",
            "source": "C0.1",
            "source_interface": "I0.1.1",
            "sink": "C0.4",
            "sink_interface": "I0.4.1",
            "amount": "1",
            "unit": "",
            "parameters": [
                {
                    "name": "Transaction throughput",
                    "value": "TPS",
                    "unit": ""
                },
                {
                    "name": "Average priority fee",
                    "value": "lamports",
                    "unit": ""
                },
                {
                    "name": "Program execution complexity",
                    "value": "compute units",
                    "unit": ""
                },
                {
                    "name": "Parallel execution efficiency",
                    "value": "percentage",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F0.2",
                "level": 1,
                "name": "Produced Blocks",
                "description": "Newly produced blocks with PoH timestamps transmitted from Validating to Protocol subsystem for consensus and finalization.\n\nKey parameters:\n1. Block leader and slot assignment\n2. PoH sequence and timestamp verification\n3. Transaction execution results and state changes\n4. Tower BFT votes and consensus participation\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/core/src/consensus\nhttps://github.com/solana-labs/solana/tree/master/poh"
            },
            "substance": {
                "sub_type": "",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Product",
            "source": "C0.4",
            "source_interface": "I0.4.2",
            "sink": "C0.5",
            "sink_interface": "I0.5.3",
            "amount": "1",
            "unit": "",
            "parameters": [
                {
                    "name": "Slot number",
                    "value": "",
                    "unit": ""
                },
                {
                    "name": "Block leader",
                    "value": "validator pubkey",
                    "unit": ""
                },
                {
                    "name": "PoH hash count",
                    "value": "ticks",
                    "unit": ""
                },
                {
                    "name": "Transaction count",
                    "value": "",
                    "unit": ""
                },
                {
                    "name": "Compute units used",
                    "value": "CU",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F0.3",
                "level": 1,
                "name": "Block & State Updates",
                "description": "Finalized blocks and network state updates distributed from Protocol to Executing subsystem with PoH sequence verification.\n\nKey parameters:\n1. Finalized block with PoH timestamps\n2. Network state root and account updates\n3. Validator vote aggregation results\n4. Performance metrics and network health\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/gossip\nhttps://github.com/solana-labs/solana/tree/master/core/src"
            },
            "substance": {
                "sub_type": "",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Product",
            "source": "C0.5",
            "source_interface": "I0.5.2",
            "sink": "C0.1",
            "sink_interface": "I0.1.0",
            "amount": "1",
            "unit": "",
            "parameters": [
                {
                    "name": "Block propagation time",
                    "value": "milliseconds",
                    "unit": ""
                },
                {
                    "name": "Vote participation",
                    "value": "percentage",
                    "unit": ""
                },
                {
                    "name": "PoH sequence verification",
                    "value": "hash confirmations",
                    "unit": ""
                },
                {
                    "name": "Network performance",
                    "value": "TPS",
                    "unit": ""
                },
                {
                    "name": "Validator consensus",
                    "value": "percentage",
                    "unit": ""
                }
            ]
        },
        {
            "info": {
                "id": "F0.4",
                "level": 1,
                "name": "Protocol Updates",
                "description": "Protocol upgrades and feature activations transmitted from Development to Protocol subsystem. Includes runtime optimizations, feature gates, and performance improvements.\n\nKey parameters:\n1. Feature gate activations\n2. Runtime optimization releases\n3. Client version updates\n4. Performance target adjustments\n\nSource files:\nhttps://github.com/solana-labs/solana/tree/master/sdk/feature-set\nhttps://github.com/solana-labs/solana/releases"
            },
            "substance": {
                "sub_type": "Code implementation",
                "type": "Message"
            },
            "type": "Flow",
            "usability": "Resource",
            "source": "C0.2",
            "source_interface": "I0.2.0",
            "sink": "C0.5",
            "sink_interface": "I0.5.0",
            "amount": "1",
            "unit": "version",
            "parameters": [
                {
                    "name": "Feature gate",
                    "value": "activation slot",
                    "unit": ""
                },
                {
                    "name": "Client version",
                    "value": "semver",
                    "unit": ""
                },
                {
                    "name": "Performance improvement",
                    "value": "TPS increase",
                    "unit": ""
                },
                {
                    "name": "Runtime optimization",
                    "value": "efficiency gain",
                    "unit": ""
                }
            ]
        }
    ],
    "hidden_entities": []
}