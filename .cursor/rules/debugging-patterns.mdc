---
description: 
globs: 
alwaysApply: false
---
# Debugging Patterns

This document captures common debugging patterns and solutions for the BERT project to accelerate problem resolution during LLM-assisted development.

## Compilation Errors

### Rust/Leptos Specific Issues

#### Callback API Issues (Leptos 0.7+)
**Error**: `expected function, found leptos::prelude::Callback<()>`
```rust
// ❌ Incorrect (Leptos 0.6 style)
on:click=move |_| on_close(())

// ✅ Correct (Leptos 0.7+ style)
on:click=move |_| on_close.run(())
```

#### Module Export Issues
**Error**: `unresolved import` or `cannot find type in this scope`
```rust
// ❌ Missing export in mod.rs
mod my_component;

// ✅ Complete export pattern
mod my_component;
pub use my_component::*;
```

#### Import Path Issues
**Error**: `use of undeclared crate or module`
```rust
// ❌ Incorrect relative import
use super::components::MyComponent;

// ✅ Correct absolute import
use crate::leptos_app::components::MyComponent;
```

### Bevy-Specific Issues

#### Entity/Component Mismatches
**Error**: `the trait bound is not satisfied`
- **Cause**: Querying for components that don't exist on entities
- **Solution**: Verify component bundles and query filters
- **Debug**: Use `bevy-inspector-egui` to inspect entity composition

#### Resource Access Issues
**Error**: `resource not found` or `borrow checker errors`
- **Cause**: Accessing resources that haven't been initialized
- **Solution**: Ensure proper resource initialization in app setup
- **Debug**: Add resource existence checks

### Tauri-Specific Issues

#### Build Pipeline Errors
**Error**: `error from build pipeline` or `wasm-bindgen` issues
- **Cause**: Often related to frontend build failures or port conflicts
- **Solution**: Kill existing processes, clear cache, restart dev server
- **Debug**: Check `trunk serve` output separately

#### Port Conflicts
**Error**: `Address already in use (os error 48)`
```bash
# Kill existing processes
pkill -f "tauri dev"
pkill -f "trunk serve"

# Or find and kill specific port
lsof -ti:1320 | xargs kill -9
```

## Runtime Errors

### Signal Management Issues

#### Signal Not Updating
**Symptoms**: UI not reacting to state changes
- **Cause**: Not using reactive reads (`signal.get()`)
- **Solution**: Ensure proper reactive context with `move ||`
```rust
// ❌ Non-reactive read
let visible = my_signal.get_untracked();

// ✅ Reactive read in view
<Show when=move || my_signal.get()>
```

#### Memory Leaks with Signals
**Symptoms**: Performance degradation over time
- **Cause**: Creating signals in render loops
- **Solution**: Create signals at component level, not in closures

### Component Lifecycle Issues

#### Props Not Updating
**Symptoms**: Component doesn't respond to prop changes
- **Cause**: Not using `#[prop(into)]` for signals
- **Solution**: Ensure proper prop declaration
```rust
// ❌ Static prop
#[component]
pub fn MyComponent(visible: bool) -> impl IntoView

// ✅ Reactive prop
#[component]
pub fn MyComponent(#[prop(into)] visible: Signal<bool>) -> impl IntoView
```

## Integration Errors

### Styling Issues

#### Tailwind Classes Not Applied
**Symptoms**: Styles not appearing in browser
- **Cause**: Classes not included in Tailwind build or typos
- **Solution**: Verify class names and check browser dev tools
- **Debug**: Use browser inspector to see computed styles

#### Z-Index Conflicts
**Symptoms**: Elements appearing behind others unexpectedly
- **Solution**: Follow established z-index hierarchy
  - `z-10`: Background elements
  - `z-20`: UI controls (buttons, toolbars)
  - `z-30`: Modals and overlays
  - `z-40`: Tooltips and dropdowns

### Event Handling Issues

#### Events Not Firing
**Symptoms**: Clicks or interactions not working
- **Cause**: Event handlers not properly bound or element not interactive
- **Solution**: Check event handler syntax and element accessibility
```rust
// ❌ Incorrect event binding
on_click=move |_| { /* handler */ }

// ✅ Correct event binding
on:click=move |_| { /* handler */ }
```

## Performance Issues

### Slow Rendering

#### Too Many Reactive Reads
**Symptoms**: UI feels sluggish or unresponsive
- **Cause**: Excessive signal reads in render loops
- **Solution**: Minimize reactive dependencies, use memoization

#### Large Component Trees
**Symptoms**: Slow initial render or updates
- **Cause**: Deep component nesting or large lists
- **Solution**: Break into smaller components, use virtual scrolling

### Memory Usage

#### Signal Accumulation
**Symptoms**: Memory usage growing over time
- **Cause**: Signals not being cleaned up properly
- **Solution**: Use proper signal lifecycle management

## Debugging Tools and Techniques

### Browser Developer Tools

#### Console Debugging
```rust
// Add temporary logging
leptos::logging::log!("Debug value: {:?}", my_value);

// Check in browser console
console.log("Component rendered");
```

#### Element Inspection
- Use browser inspector to verify DOM structure
- Check computed styles for CSS issues
- Monitor network tab for failed requests

### Rust Debugging

#### Compilation Debugging
```bash
# Verbose compilation output
cargo build --verbose

# Check specific warnings
cargo clippy

# Format code consistently
cargo fmt
```

#### Runtime Debugging
```rust
// Add debug prints
dbg!(&my_variable);

// Use debug assertions
debug_assert!(condition, "Custom message");
```

### Tauri Debugging

#### Development Tools
```bash
# Run with additional logging
RUST_LOG=debug cargo tauri dev

# Check Tauri console output
# Look for both Rust backend and frontend logs
```

## Error Recovery Strategies

### Quick Recovery Steps
1. **Save work**: Commit or stash current changes
2. **Clean build**: `cargo clean && cargo build`
3. **Restart dev server**: Kill and restart `cargo tauri dev`
4. **Check dependencies**: Verify `Cargo.toml` versions

### Systematic Debugging
1. **Isolate the issue**: Comment out recent changes
2. **Minimal reproduction**: Create smallest failing example
3. **Check patterns**: Compare with working similar code
4. **Documentation review**: Verify API usage against docs

### Rollback Strategies
1. **Git reset**: Return to last working commit
2. **Selective revert**: Undo specific problematic changes
3. **Clean slate**: Start feature implementation over with lessons learned

## Prevention Strategies

### Before Implementation
- [ ] Check existing patterns in codebase
- [ ] Verify dependency versions compatibility
- [ ] Plan integration points carefully

### During Implementation
- [ ] Test compilation after each significant change
- [ ] Use established patterns consistently
- [ ] Add debugging output for complex logic

### After Implementation
- [ ] Test complete user workflow
- [ ] Check for console errors
- [ ] Verify responsive behavior
- [ ] Test edge cases

## Common Error Messages Reference

### Leptos Errors
- `expected function, found Callback` → Use `.run()` method
- `cannot find macro` → Check import statements
- `trait bound not satisfied` → Verify prop types

### Rust Errors
- `borrow checker` → Review ownership and lifetimes
- `unresolved import` → Check module exports
- `type mismatch` → Verify expected types

### Build Errors
- `wasm-bindgen error` → Check frontend build process
- `address in use` → Kill existing processes
- `file not found` → Verify file paths and structure

