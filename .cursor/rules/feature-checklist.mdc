---
description:
globs:
alwaysApply: false
---
# Feature Implementation Checklist

This document provides a comprehensive checklist for implementing features in the BERT project with LLM assistance.

## Pre-Implementation Checklist

### Documentation Setup
- [ ] Feature documentation template generated: `./scripts/bert.sh feature "Feature Name"`
- [ ] Initial documentation sections filled in (Overview, Goals, Requirements)
- [ ] Feature documentation reviewed for clarity and completeness
- [ ] Documentation path noted for reference throughout development

### Requirements Analysis
- [ ] User requirements clearly defined and understood
- [ ] Success criteria established and measurable
- [ ] Edge cases and error conditions identified
- [ ] Integration points with existing features mapped
- [ ] Requirements documented in feature documentation

### Technical Planning
- [ ] Existing similar patterns identified in codebase
- [ ] Component architecture planned and approved
- [ ] File structure and naming conventions confirmed
- [ ] Dependencies and version compatibility verified
- [ ] Implementation plan added to feature documentation

### Design Consistency
- [ ] UI/UX patterns align with existing application design
- [ ] Styling approach follows established conventions
- [ ] Interaction patterns consistent with current features
- [ ] Accessibility requirements considered

## Implementation Checklist

### Component Creation
- [ ] Component file created in correct directory structure
- [ ] Component follows established naming conventions
- [ ] Props interface designed following project patterns
- [ ] Component documentation added following guidelines

### Module Integration
- [ ] Module declaration added to appropriate `mod.rs`
- [ ] Public exports configured correctly
- [ ] Import statements use correct absolute paths
- [ ] No circular dependencies introduced

### Code Quality
- [ ] Code follows established patterns from `patterns.mdc`
- [ ] Error handling implemented appropriately
- [ ] Performance considerations addressed
- [ ] No temporary or debug code remains

### Styling Implementation
- [ ] Tailwind classes applied consistently
- [ ] Responsive design implemented where appropriate
- [ ] Color scheme matches existing components
- [ ] Interactive states (hover, focus, active) implemented
- [ ] Z-index hierarchy respected

## Testing Checklist

### Compilation Testing
- [ ] Code compiles without errors
- [ ] No new compilation warnings introduced
- [ ] All imports resolve correctly
- [ ] Module exports work as expected

### Functionality Testing
- [ ] Core feature functionality works as specified
- [ ] All user interactions behave correctly
- [ ] Signal management and state updates work properly
- [ ] Component lifecycle behaves as expected

### Integration Testing
- [ ] Feature integrates cleanly with existing UI
- [ ] No regressions in existing functionality
- [ ] Event handling works correctly
- [ ] Component communication functions properly

### UI/UX Testing
- [ ] Visual design matches specifications
- [ ] Responsive behavior works across screen sizes
- [ ] Interactive elements provide appropriate feedback
- [ ] Loading states and transitions work smoothly

### Browser Testing
- [ ] No console errors or warnings
- [ ] Performance is acceptable
- [ ] Memory usage is reasonable
- [ ] Network requests work correctly (if applicable)

## Documentation Checklist

### Feature Documentation
- [ ] Feature documentation template is complete with all sections filled in
- [ ] Implementation details are fully documented
- [ ] API changes are clearly documented
- [ ] Testing approach is documented
- [ ] Usage examples are included
- [ ] Design decisions and alternatives considered are recorded
- [ ] Documentation is up-to-date with final implementation

### Code Documentation
- [ ] Component documentation follows `commenting-guidelines.mdc`
- [ ] Complex logic is well-commented
- [ ] Public API is documented with examples
- [ ] Type definitions are clear and documented
- [ ] References to feature documentation are included where appropriate

### User Documentation
- [ ] Feature usage is documented (if user-facing)
- [ ] Integration examples provided (if applicable)
- [ ] Known limitations documented
- [ ] Troubleshooting information included

### Developer Documentation
- [ ] Implementation patterns documented for reuse
- [ ] Architecture decisions recorded
- [ ] Dependencies and requirements noted
- [ ] Future enhancement opportunities identified

## Quality Assurance Checklist

### Code Review Preparation
- [ ] All checklist items completed
- [ ] Code is properly formatted (`cargo fmt`)
- [ ] Linting passes (`cargo clippy`)
- [ ] No obvious security issues

### Performance Verification
- [ ] No unnecessary re-renders or computations
- [ ] Signal usage optimized
- [ ] Component hierarchy is efficient
- [ ] Memory leaks checked and prevented

### Accessibility Check
- [ ] Keyboard navigation works properly
- [ ] Screen reader compatibility considered
- [ ] Color contrast meets standards
- [ ] Focus management implemented correctly

## Deployment Preparation Checklist

### Final Testing
- [ ] Complete user workflow tested end-to-end
- [ ] Error scenarios tested and handled gracefully
- [ ] Edge cases verified
- [ ] Performance under load acceptable

### Git Preparation
- [ ] All changes committed with clear messages
- [ ] Commit messages reference feature documentation
- [ ] Commit history is clean and logical
- [ ] Branch is up-to-date with main/develop
- [ ] No merge conflicts exist
- [ ] Feature documentation is complete and committed

### Release Readiness
- [ ] Feature flags configured (if applicable)
- [ ] Rollback plan prepared
- [ ] Monitoring and logging configured
- [ ] Documentation updated for release

## Post-Implementation Checklist

### Immediate Follow-up
- [ ] User feedback collected and addressed
- [ ] Any immediate issues resolved
- [ ] Performance metrics monitored
- [ ] Error rates tracked

### Long-term Maintenance
- [ ] Feature added to maintenance documentation
- [ ] Patterns documented for future reuse
- [ ] Technical debt identified and logged
- [ ] Enhancement opportunities recorded

## Feature-Specific Checklists

### Modal Components
- [ ] Backdrop click-to-close implemented
- [ ] Escape key handling added
- [ ] Focus trap implemented
- [ ] Scroll lock applied when open
- [ ] Z-index conflicts avoided

### Form Components
- [ ] Validation implemented and tested
- [ ] Error states designed and implemented
- [ ] Loading states handled appropriately
- [ ] Data persistence considered
- [ ] Accessibility labels added

### Interactive Elements
- [ ] Touch/mobile interactions tested
- [ ] Keyboard shortcuts implemented
- [ ] Visual feedback provided
- [ ] Loading states handled
- [ ] Error recovery implemented

### Data Display Components
- [ ] Loading states implemented
- [ ] Empty states designed
- [ ] Error states handled
- [ ] Pagination considered (if applicable)
- [ ] Sorting/filtering implemented (if applicable)

## Common Pitfall Prevention

### Before Starting
- [ ] Requirements are clear and complete
- [ ] Existing patterns have been researched
- [ ] Integration complexity is understood
- [ ] Time estimate is realistic

### During Implementation
- [ ] Compilation is tested after each major change
- [ ] Patterns are followed consistently
- [ ] Errors are resolved immediately
- [ ] Scope creep is avoided

### Before Completion
- [ ] Complete user workflow has been tested
- [ ] Documentation is complete and accurate
- [ ] No debugging code remains
- [ ] Performance impact is acceptable

## Success Criteria

### Technical Success
- ✅ Feature compiles and runs without errors
- ✅ Integration is seamless and non-disruptive
- ✅ Performance meets or exceeds expectations
- ✅ Code quality meets project standards

### User Success
- ✅ Feature solves the intended problem
- ✅ User experience is intuitive and pleasant
- ✅ Feature is discoverable and accessible
- ✅ Error handling is graceful and helpful

### Project Success
- ✅ Implementation follows established patterns
- ✅ Documentation enables future maintenance
- ✅ Code is reusable and extensible
- ✅ Technical debt is minimized

## Checklist Usage Guidelines

### For Simple Features
Focus on core implementation and integration checklists, with lighter emphasis on documentation and testing.

### For Complex Features
Use all checklists thoroughly, with additional emphasis on architecture documentation and comprehensive testing.

### For Experimental Features
Add additional checkpoints for validation of approach and rollback procedures.

### For Critical Features
Include additional security, performance, and reliability checks beyond the standard checklist.
